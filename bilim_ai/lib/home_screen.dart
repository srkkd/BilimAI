// lib/home_screen.dart
import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'api_key.dart';
import 'package:flutter_math_fork/flutter_math.dart';
import 'package:flutter/services.dart';
import 'auth.dart';
import 'history.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'history_screen.dart';

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: API –∫–ª—é—á —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª–µ `api_key.dart`.

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ --dart-define (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const String _apiKeyFromDefine = String.fromEnvironment('BILIM_GEMINI_API_KEY');

String _effectiveApiKey() {
  // 1) dart-define
  if (_apiKeyFromDefine.isNotEmpty) return _apiKeyFromDefine;
  // 2) —Ñ–æ–ª–±—ç–∫ –∏–∑ api_key.dart
  if (apiKey.isNotEmpty && apiKey != 'YOUR_GEMINI_API_KEY_HERE') return apiKey;
  return '';
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  final TextEditingController _textController = TextEditingController();
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String? _aiResponse;
  bool _isLoading = false;
  String? _cachedModelName; // –ö–µ—à –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
  final AuthService _auth = AuthService();
  final HistoryService _history = HistoryService();
  String _uiLang = 'ru'; // RU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  final ScrollController _scrollController = ScrollController();
  final List<Map<String, String>> _messages = <Map<String, String>>[]; // {role: user|assistant, content}
  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞

  @override
  void initState() {
    super.initState();
    _loadUiLang();
    _logDb('app_started');
  }

  Future<void> _loadUiLang() async {
    final p = await SharedPreferences.getInstance();
    final saved = p.getString('ui.lang');
    if (saved == null) {
      await p.setString('ui.lang', 'ru');
      _uiLang = 'ru';
    } else {
      _uiLang = (saved == 'kk') ? 'kk' : 'ru';
    }
    if (mounted) setState(() {});
  }

  String t(String key) {
    final ru = <String, String>{
      'subtitle': '–§–∏–∑–∏–∫–∞ ‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
      'placeholder': '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ...',
      'thinking': 'Bilim AI –¥—É–º–∞–µ—Ç...',
      'ask': '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∏–∑–∏–∫–µ',
      'help': '–Ø –ø–æ–º–æ–≥—É –≤–∞–º!',
      'answer_title': '–û—Ç–≤–µ—Ç Bilim AI:',
      'clear': '–û—á–∏—Å—Ç–∏—Ç—å',
      'info': '–ò–Ω—Ñ–æ',
      'close': '–ó–∞–∫—Ä—ã—Ç—å',
      'language': '–Ø–∑—ã–∫',
      'ready': '–ì–æ—Ç–æ–≤',
      'sending': '–û—Ç–ø—Ä–∞–≤–∫–∞...',
      'login': '–í—Ö–æ–¥',
      'register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      'guest': '–ì–æ—Å—Ç—å',
      'logout': '–í—ã—Ö–æ–¥',
      'cancel': '–û—Ç–º–µ–Ω–∞',
      'history': '–ò—Å—Ç–æ—Ä–∏—è',
      'info_title': '–û Bilim AI',
      'info_desc': 'Bilim AI ‚Äî —ç—Ç–æ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–∑–∏–∫–µ.',
      'features': '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:',
      'f1': '‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ñ–∏–∑–∏–∫–µ',
      'f2': '‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏–π',
      'f3': '‚Ä¢ –§–æ—Ä–º—É–ª—ã –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è',
      'f4': '‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º',
      'examples': '–ü—Ä–∏–º–µ—Ä—ã:',
      'ex1': '‚Ä¢ ¬´–û–±—ä—è—Å–Ω–∏ —Ç—Ä–µ—Ç–∏–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞¬ª',
      'ex2': '‚Ä¢ ¬´–†–∞—Å—Å—á–∏—Ç–∞–π F = m¬∑a¬ª',
      'ex3': '‚Ä¢ ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏?¬ª',
    };
    final kk = <String, String>{
      'subtitle': '–§–∏–∑–∏–∫–∞ ‚Ä¢ “ö—ã—Å“õ–∞ –∂”ô–Ω–µ –Ω–∞“õ—Ç—ã –∂–∞—É–∞–ø',
      'placeholder': '–§–∏–∑–∏–∫–∞ –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑...',
      'thinking': 'Bilim AI –æ–π–ª–∞–Ω—ã–ø –∂–∞—Ç—ã—Ä...',
      'ask': '–§–∏–∑–∏–∫–∞ –±–æ–π—ã–Ω—à–∞ —Å“±—Ä–∞“õ “õ–æ–π—ã“£—ã–∑',
      'help': '–ú–µ–Ω —Å—ñ–∑–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω!',
      'answer_title': 'Bilim AI –∂–∞—É–∞–±—ã:',
      'clear': '–¢–∞–∑–∞–ª–∞—É',
      'info': '–ê“õ–ø–∞—Ä–∞—Ç',
      'close': '–ñ–∞–±—É',
      'language': '–¢—ñ–ª',
      'ready': '–î–∞–π—ã–Ω',
      'sending': '–ñ—ñ–±–µ—Ä—ñ–ª—É–¥–µ...',
      'login': '–ö—ñ—Ä—É',
      'register': '–¢—ñ—Ä–∫–µ–ª—É',
      'guest': '“ö–æ–Ω–∞“õ',
      'logout': '–®—ã“ì—É',
      'cancel': '–ë–æ–ª–¥—ã—Ä–º–∞—É',
      'history': '–¢–∞—Ä–∏—Ö',
      'info_title': 'Bilim AI —Ç—É—Ä–∞–ª—ã',
      'info_desc': 'Bilim AI ‚Äî —Ñ–∏–∑–∏–∫–∞ –±–æ–π—ã–Ω—à–∞ –º–∞–º–∞–Ω–¥–∞–Ω“ì–∞–Ω –ñ–ò –∫”©–º–µ–∫—à—ñ—Å—ñ.',
      'features': '–ú“Ø–º–∫—ñ–Ω–¥—ñ–∫—Ç–µ—Ä:',
      'f1': '‚Ä¢ –§–∏–∑–∏–∫–∞ –µ—Å–µ–ø—Ç–µ—Ä—ñ–Ω —à–µ—à—É',
      'f2': '‚Ä¢ “∞“ì—ã–º–¥–∞—Ä–¥—ã —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É',
      'f3': '‚Ä¢ –§–æ—Ä–º—É–ª–∞–ª–∞—Ä –º–µ–Ω —Ç–µ“£–¥–µ—É–ª–µ—Ä',
      'f4': '‚Ä¢ –û—Ä—ã—Å –∂”ô–Ω–µ “õ–∞–∑–∞“õ —Ç—ñ–ª–¥–µ—Ä—ñ–Ω–¥–µ –∂–∞—É–∞–ø',
      'examples': '“ö–æ–ª–¥–∞–Ω—É –º—ã—Å–∞–ª–¥–∞—Ä—ã:',
      'ex1': '‚Ä¢ ¬´–ù—å—é—Ç–æ–Ω–Ω—ã“£ “Ø—à—ñ–Ω—à—ñ –∑–∞“£—ã–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä¬ª',
      'ex2': '‚Ä¢ ¬´F = m¬∑a —Ñ–æ—Ä–º—É–ª–∞—Å—ã–Ω –µ—Å–µ–ø—Ç–µ¬ª',
      'ex3': '‚Ä¢ ¬´–≠–Ω–µ—Ä–≥–∏—è —Å–∞“õ—Ç–∞–ª—É –∑–∞“£—ã –¥–µ–≥–µ–Ω—ñ–º—ñ–∑ –Ω–µ?¬ª',
    };
    final dict = _uiLang == 'kk' ? kk : ru;
    return dict[key] ?? key;
  }

  Future<void> _logDb(String message) async {
    try {
      await Supabase.instance.client.from('app_log').insert({
        'message': message,
      });
    } catch (_) {
      // ignore
    }
  }

  // –†–µ–Ω–¥–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π **–∂–∏—Ä–Ω–æ–≥–æ** (–ø—Ä–æ—Å—Ç–∞—è Markdown-—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
  Widget _buildMarkdownText(String text) {
    final defaultStyle = const TextStyle(fontSize: 16, height: 1.6, color: Colors.black87);
    final boldReg = RegExp(r'\*\*(.+?)\*\*', dotAll: true);
    final spans = <TextSpan>[];
    int last = 0;
    for (final m in boldReg.allMatches(text)) {
      if (m.start > last) {
        spans.add(TextSpan(text: text.substring(last, m.start)));
      }
      spans.add(TextSpan(text: m.group(1)!, style: const TextStyle(fontWeight: FontWeight.w600)));
      last = m.end;
    }
    if (last < text.length) {
      spans.add(TextSpan(text: text.substring(last)));
    }
    return RichText(text: TextSpan(style: defaultStyle, children: spans));
  }

  // –†–µ–Ω–¥–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π inline TeX ($...$) –∏ **–∂–∏—Ä–Ω–æ–≥–æ** —Ç–µ–∫—Å—Ç–∞
  Widget _buildResponseWidget(String text) {
    final texReg = RegExp(r'\$(.+?)\$', dotAll: true);
    final widgets = <Widget>[];
    int last = 0;
    for (final m in texReg.allMatches(text)) {
      if (m.start > last) {
        final pre = text.substring(last, m.start);
        if (pre.isNotEmpty) widgets.add(_buildMarkdownText(pre));
      }
      final tex = m.group(1)!;
      widgets.add(Math.tex(
        tex,
        mathStyle: MathStyle.text,
        textStyle: const TextStyle(fontSize: 16, height: 1.6, color: Colors.black87),
      ));
      last = m.end;
    }
    if (last < text.length) {
      final tail = text.substring(last);
      if (tail.isNotEmpty) widgets.add(_buildMarkdownText(tail));
    }

    if (widgets.isEmpty) {
      return _buildMarkdownText(text);
    }
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        for (int i = 0; i < widgets.length; i++) ...[
          widgets[i],
          if (i != widgets.length - 1) const SizedBox(height: 4),
        ],
      ],
    );
  }

  // –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞: –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞–∑–∞—Ö—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  String _detectLanguage(String text) {
    const kkChars = [
      '”ô', '“ì', '“õ', '“£', '”©', '“±', '“Ø', '“ª', '—ñ',
      '”ò', '“í', '“ö', '“¢', '”®', '“∞', '“Æ', '“∫', '–Ü',
    ];
    for (final ch in kkChars) {
      if (text.contains(ch)) return 'kk';
    }
    return 'ru';
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–∑–∏–∫–∏
  String _getPhysicsPrompt(String userQuestion) {
    final lang = _detectLanguage(userQuestion);
    final enforce = lang == 'kk'
        ? '–¢—ñ–ª: “õ–∞–∑–∞“õ—à–∞. –ñ–∞—É–∞–ø—Ç—ã “õ–∞—Ç–∞“£ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±–µ—Ä.'
        : '–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.';
  return '''$enforce
–¢—ã ‚Äî Bilim AI, —É–º–Ω—ã–π –¥–≤—É—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ–∏–∑–∏–∫–µ.  
–¢—ã —É–º–µ–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å **–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–∞—Ö**, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.  
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏ ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.  
–ï—Å–ª–∏ –ø–∏—à–µ—Ç –ø–æ-–∫–∞–∑–∞—Ö—Å–∫–∏ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø–æ-–∫–∞–∑–∞—Ö—Å–∫–∏.  
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–º–µ—à–∏–≤–∞–π —è–∑—ã–∫–∏ –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üéØ **–¢–í–û–Ø –¶–ï–õ–¨**
–ü–æ–º–æ–≥–∞—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–∑—É—á–∞—Ç—å —Ñ–∏–∑–∏–∫—É, –æ–±—ä—è—Å–Ω—è—è –∑–∞–∫–æ–Ω—ã, —Ä–µ—à–∞—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤–æ–¥—è —Ñ–æ—Ä–º—É–ª—ã.  
–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π, —Ç–æ—á–Ω—ã–π, –ª–æ–≥–∏—á–Ω—ã–π –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚öôÔ∏è **–ü–†–ê–í–ò–õ–ê –û–ë–©–ï–ù–ò–Ø**
1. –û—Ç–≤–µ—á–∞–π **—Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∏–∑–∏–∫–µ**.  
   ‚ùó –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ñ–∏–∑–∏–∫–µ ‚Äî –ø–∏—à–∏:  
   "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∏–∑–∏–∫–µ."  
   –∏–ª–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º:  
   "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Ç–µ–∫ —Ñ–∏–∑–∏–∫–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω."
2. –û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ –≤–æ–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π) –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ.  
3. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π **—Ñ–æ—Ä–º—É–ª—ã, –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è** –∏ **–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è**.  
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:  
   **–î–∞–Ω–æ ‚Üí –§–æ—Ä–º—É–ª–∞ ‚Üí –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Üí –í—ã—á–∏—Å–ª–µ–Ω–∏–µ ‚Üí –û—Ç–≤–µ—Ç.**
5. –í –∫–æ–Ω—Ü–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–ù, –î–∂, –º/—Å, –∫–≥, —Ç.–¥.).
6. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π ‚Äî –¥–∞–π **–∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ + —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª.**
7. –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ‚Äî **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∂–∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ.**
8. –û—Ç–≤–µ—á–∞–π **–∫–æ—Ä–æ—Ç–∫–æ**, –º–∞–∫—Å–∏–º—É–º **5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π**.
9. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–æ—Ä–º—É–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã.
10. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.  
11. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π ¬´–≤–æ–¥–∞¬ª, –Ω–µ —Ä–∞—Å—Å—É–∂–¥–∞–π –æ –∂–∏–∑–Ω–∏, –∏—Å—Ç–æ—Ä–∏–∏, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, —à—É—Ç–∫–∞—Ö –∏ –ø—Ä–æ—á–µ–º.  

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìò **–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê**
- –ù–∞—É—á–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π.  
- –ë–µ–∑ —ç–º–æ—Ü–∏–π, –±–µ–∑ –ª–∏—á–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è.  
- –ë–µ–∑ "—è –¥—É–º–∞—é", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "–≤–æ–∑–º–æ–∂–Ω–æ".  
- –í—Å—ë —Å—Ç—Ä–æ–≥–æ, –ª–æ–≥–∏—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.  
- –î–ª—è —Ñ–æ—Ä–º—É–ª –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∑–∞–ø–∏—Å—å: F=ma, v=s/t, E=mc¬≤ –∏ —Ç.–¥.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üß† **–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê**
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —Å–∫–∞–∂–∏, –∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äú–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è‚Äù).  
- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è ‚Äî –≤—ã–±–µ—Ä–∏ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π.  
- –ü—Ä–æ–≤–µ—Ä—è–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–µ –¥–æ–ø—É—Å—Ç–∏ –æ—à–∏–±–æ–∫ –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö).  
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∏–∑ —à–∫–æ–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ ‚Äî —Ä–µ—à–∞–π –ø–æ —à–∫–æ–ª—å–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ.  
- –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —ç–Ω–µ—Ä–≥–∏–µ–π, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ–º) ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±—ä—è—Å–Ω—è–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —à–∞–≥–∞–º.

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìó **–¢–ï–ú–´, –ö–û–¢–û–†–´–ï –¢–´ –ú–û–ñ–ï–®–¨ –û–ë–°–£–ñ–î–ê–¢–¨**
- –ú–µ—Ö–∞–Ω–∏–∫–∞ (–¥–≤–∏–∂–µ–Ω–∏–µ, —Å–∏–ª–∞, —Ç—Ä–µ–Ω–∏–µ, —É—Å–∫–æ—Ä–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞, —ç–Ω–µ—Ä–≥–∏—è, –∏–º–ø—É–ª—å—Å)
- –¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç–µ–ø–ª–æ, –¥–∞–≤–ª–µ–Ω–∏–µ, –≥–∞–∑–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã)
- –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –∏ –º–∞–≥–Ω–µ—Ç–∏–∑–º (—Ç–æ–∫, —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –º–∞–≥–Ω–∏—Ç–Ω–æ–µ –ø–æ–ª–µ)
- –û–ø—Ç–∏–∫–∞ (–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏–µ, –ª–∏–Ω–∑—ã, –∑–µ—Ä–∫–∞–ª–∞)
- –ö–æ–ª–µ–±–∞–Ω–∏—è –∏ –≤–æ–ª–Ω—ã (—á–∞—Å—Ç–æ—Ç–∞, –∞–º–ø–ª–∏—Ç—É–¥–∞, –ø–µ—Ä–∏–æ–¥, –∑–≤—É–∫)
- –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∏ —è–¥–µ—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —à–∫–æ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)
- –ï–¥–∏–Ω–∏—Ü—ã –°–ò, –∏–∑–º–µ—Ä–µ–Ω–∏—è, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìê **–ë–ê–ó–û–í–´–ï –§–û–†–ú–£–õ–´ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è)**
- –í—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞: F = ma  
- –î–∞–≤–ª–µ–Ω–∏–µ: p = F / S  
- –†–∞–±–æ—Ç–∞: A = F¬∑s  
- –ú–æ—â–Ω–æ—Å—Ç—å: N = A / t  
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: E‚Çö = mgh  
- –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è: E‚Çñ = mv¬≤ / 2  
- –ó–∞–∫–æ–Ω –û–º–∞: I = U / R  
- –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: R = œÅ¬∑(l / S)  
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ø–ª–æ—Ç—ã: Q = c¬∑m¬∑Œît  
- –£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: Q‚ÇÅ = Q‚ÇÇ  
- –°–∫–æ—Ä–æ—Å—Ç—å: v = s / t  
- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: œÅ = m / V  

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üßæ **–ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í**

üá∑üá∫ –†—É—Å—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:
–í–æ–ø—Ä–æ—Å: ‚Äú–¢–µ–ª–æ –º–∞—Å—Å–æ–π 3 –∫–≥ –¥–≤–∏–∂–µ—Ç—Å—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º 4 –º/—Å¬≤. –ù–∞–π–¥–∏ —Å–∏–ª—É.‚Äù
–û—Ç–≤–µ—Ç:  
–î–∞–Ω–æ: m=3 –∫–≥, a=4 –º/—Å¬≤.  
–§–æ—Ä–º—É–ª–∞: F=ma.  
–ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞: 3¬∑4=12 –ù.  
–û—Ç–≤–µ—Ç: **12 –ù.**

üá∞üáø “ö–∞–∑–∞“õ –º—ã—Å–∞–ª—ã:
–°“±—Ä–∞“õ: ‚Äú–ú–∞—Å—Å–∞—Å—ã 3 –∫–≥ –¥–µ–Ω–µ 4 –º/—Å¬≤ “Ø–¥–µ—É–º–µ–Ω “õ–æ–∑“ì–∞–ª–∞–¥—ã. –ö“Ø—à—Ç—ñ —Ç–∞–ø.‚Äù  
–ñ–∞—É–∞–ø:  
–ë–µ—Ä—ñ–ª–≥–µ–Ω—ñ: m=3 –∫–≥, a=4 –º/—Å¬≤.  
–§–æ—Ä–º—É–ª–∞: F=ma.  
“ö–æ—é: 3¬∑4=12 –ù.  
–ñ–∞—É–∞–ø: **12 –ù.**

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ (–∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–∏—Ç–∞–π—Å–∫–æ–º, –∏ —Ç.–¥.) ‚Äî  
–æ—Ç–≤–µ—Ç—å:  
"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–∞—Ö."  
–∏–ª–∏  
"–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –º–µ–Ω —Ç–µ–∫ –æ—Ä—ã—Å –∂”ô–Ω–µ “õ–∞–∑–∞“õ —Ç—ñ–ª–¥–µ—Ä—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω."

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üìç –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
$userQuestion
''';
}

  // –î–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  void _showInfoDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(t('info_title')),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(t('info_desc'), style: const TextStyle(fontSize: 16)),
                SizedBox(height: 16),
                Text(t('features'), style: const TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text(t('f1')),
                Text(t('f2')),
                Text(t('f3')),
                Text(t('f4')),
                SizedBox(height: 16),
                Text(t('examples'), style: const TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text(t('ex1')),
                Text(t('ex2')),
                Text(t('ex3')),
              ],
            ),
          ),
          actions: [
            TextButton(
              child: Text(t('close')),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void _showAuthDialog() {
    final emailCtrl = TextEditingController();
    final passCtrl = TextEditingController();
    bool isLogin = true;
    bool busy = false;
    showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(
          builder: (ctx, setS) => AlertDialog(
            title: Text(isLogin ? t('login') : t('register')),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (busy)
                    const LinearProgressIndicator(minHeight: 2),
                  TextField(
                    controller: emailCtrl,
                    decoration: const InputDecoration(labelText: 'Email'),
                  ),
                  TextField(
                    controller: passCtrl,
                    decoration: InputDecoration(labelText: _uiLang == 'kk' ? '“ö“±–ø–∏—è—Å”©–∑' : '–ü–∞—Ä–æ–ª—å'),
                    obscureText: true,
                  ),
                  const SizedBox(height: 8),
                  TextButton(
                    onPressed: () => setS(() => isLogin = !isLogin),
                    child: Text(isLogin ? t('register') : t('login')),
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  await _auth.continueAsGuest();
                  if (mounted) setState(() {});
                  Navigator.pop(ctx);
                },
                child: Text(t('guest')),
              ),
              TextButton(
                onPressed: () async {
                  final email = emailCtrl.text.trim();
                  final pass = passCtrl.text;
                  bool ok;
                  try {
                    setS(() => busy = true);
                    if (isLogin) {
                      ok = await _auth.login(email, pass);
                    } else {
                      if (pass.length < 6) {
                        throw Exception(_uiLang == 'kk' ? '“ö“±–ø–∏—è—Å”©–∑ –∫–µ–º—ñ–Ω–¥–µ 6 —Ç–∞“£–±–∞' : '–ü–∞—Ä–æ–ª—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                      }
                      ok = await _auth.register(email, pass);
                    }
                  } catch (e) {
                    ok = false;
                    if (ctx.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(e.toString())),
                      );
                    }
                  } finally {
                    setS(() => busy = false);
                  }
                  if (ok) {
                    if (mounted) setState(() {});
                    if (ctx.mounted) Navigator.pop(ctx);
                  } else {
                    if (ctx.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(isLogin ? (_uiLang == 'kk' ? '“ö–∞—Ç–µ email/–ø–∞—Ä–æ–ª—å' : '–ù–µ–≤–µ—Ä–Ω—ã–π email/–ø–∞—Ä–æ–ª—å') : (_uiLang == 'kk' ? '–ú“±–Ω–¥–∞–π email –±–∞—Ä' : 'Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'))),
                      );
                    }
                  }
                },
                child: Text(isLogin ? '–ö—ñ—Ä—É' : '–¢—ñ—Ä–∫–µ–ª—É'),
              ),
            ],
          ),
        );
      },
    );
  }

  Future<String?> _discoverSupportedModel() async {
    try {
      final uri = Uri.parse('https://generativelanguage.googleapis.com/v1/models?key=$apiKey');
      final response = await http.get(uri);
      if (response.statusCode != 200) {
        return null;
      }
      final data = jsonDecode(response.body);
      final List models = (data['models'] as List? ?? []);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ generateContent
      final List<String> availableModelNames = models
          .where((m) => (m['supportedGenerationMethods'] as List?)?.contains('generateContent') == true)
          .map<String>((m) => (m['name'] as String).replaceFirst('models/', ''))
          .toList();

      if (availableModelNames.isEmpty) return null;

      // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
      const List<String> preferred = [
        'gemini-1.5-flash-002',
        'gemini-1.5-pro-002',
        'gemini-1.5-flash-latest',
        'gemini-1.5-pro-latest',
      ];

      for (final p in preferred) {
        if (availableModelNames.contains(p)) return p;
      }

      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
      return availableModelNames.first;
    } catch (_) {
      return null;
    }
  }

  Future<String?> _getUsableModel() async {
    if (_cachedModelName != null) return _cachedModelName;
    final discovered = await _discoverSupportedModel();
    if (discovered != null) {
      _cachedModelName = discovered;
    }
    return _cachedModelName;
  }

Future<void> _sendToAI() async {
  if (_textController.text.isEmpty) {
    return;
  }

  setState(() {
    _isLoading = true;
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
    _messages.add({'role': 'user', 'content': _textController.text});
    _aiResponse = null;
  });

  try {
    final physicsPrompt = _getPhysicsPrompt(_textController.text);

    Future<http.Response> _callModel(String modelName) {
      final effectiveKey = _effectiveApiKey();
      if (effectiveKey.isEmpty) {
        return Future.value(http.Response(
            jsonEncode({
              'error':
                  'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ --dart-define=BILIM_GEMINI_API_KEY=... –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –≤ lib/api_key.dart.'
            }),
            400));
      }
      final url = Uri.parse(
          'https://generativelanguage.googleapis.com/v1/models/'
          '$modelName:generateContent?key=$effectiveKey');
      return http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'contents': [
            {
              'role': 'user',
              'parts': [
                {'text': physicsPrompt}
              ]
            }
          ],
          'generationConfig': {
            'temperature': 0.3,
            'topK': 32,
            'topP': 0.9,
            'maxOutputTokens': 1024
          }
        }),
      );
    }

    String? modelToUse = await _getUsableModel();
    modelToUse ??= 'gemini-1.5-flash-002';
    http.Response response = await _callModel(modelToUse);

    // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    if (response.statusCode == 404) {
      final discovered = await _discoverSupportedModel();
      if (discovered != null && discovered != modelToUse) {
        _cachedModelName = discovered;
        response = await _callModel(discovered);
      } else {
        // –Ø–≤–Ω—ã–π —Ñ–æ–ª–±—ç–∫
        response = await _callModel('gemini-1.5-pro-002');
        if (response.statusCode == 404) {
          // –ü–æ–ø—Ä–æ–±—É–µ–º latest –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å
          response = await _callModel('gemini-1.5-pro-latest');
        }
      }
    }

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final text = data['candidates'][0]['content']['parts'][0]['text'];
      setState(() {
        _aiResponse = text;
        _messages.add({'role': 'assistant', 'content': text});
      });
      // Save history for logged-in users (local + Supabase)
      final email = await _auth.currentUserEmail();
      if (email != null && email.isNotEmpty) {
        await _history.addEntry(
          email: email,
          question: _textController.text,
          answer: text,
          at: DateTime.now(),
        );
        try {
          final uid = Supabase.instance.client.auth.currentUser?.id;
          await Supabase.instance.client.from('user_history').insert({
            'user_id': uid,
            'email': email,
            'question': _textController.text,
            'answer': text,
          });
          // –¢–∞–∫–∂–µ –ø–∏—à–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É telegram_messages (–¥–µ–º–æ)
          await Supabase.instance.client.from('telegram_messages').insert({
            'from_user_id': uid ?? 'guest',
            'from_username': email,
            'to_user_id': 'bilim_ai',
            'message': _textController.text,
          });
        } catch (_) {
          // ignore SB error, keep local history
        }
      }
    } else if (response.statusCode == 400) {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ 400: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.';
      });
    } else if (response.statusCode == 401) {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ 401: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á Gemini.';
      });
    } else if (response.statusCode == 403) {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ 403: Generative Language API –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤–∫–ª—é—á–∏—Ç–µ API, –∑–∞—Ç–µ–º –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ:\nhttps://console.developers.google.com/apis/api/generativelanguage.googleapis.com/overview?project=1045343908557';
      });
    } else if (response.statusCode == 404) {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ 404: –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏/–ø—Ä–æ–µ–∫—Ç–∞. –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ gemini-1.5-pro-002.';
      });
    } else if (response.statusCode == 429) {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ 429: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      });
    } else if (response.statusCode >= 500) {
      setState(() {
        _aiResponse = '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Gemini. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.';
      });
    } else {
      setState(() {
        _aiResponse = '–û—à–∏–±–∫–∞ ${response.statusCode}: ${response.body}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ gemini-1.5-pro-002 (v1). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –≤–∫–ª—é—á—ë–Ω –≤ —Ç–æ–º –∂–µ –ø—Ä–æ–µ–∫—Ç–µ, —á—Ç–æ –∏ –∫–ª—é—á.';
      });
    }
  } catch (e) {
    setState(() {
      _aiResponse = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.toString()}';
    });
  } finally {
    setState(() {
      _isLoading = false;
    });
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await Future.delayed(const Duration(milliseconds: 50));
    if (_scrollController.hasClients) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 250),
        curve: Curves.easeOut,
      );
    }
  }

}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        scrolledUnderElevation: 0,
        surfaceTintColor: Colors.transparent,
        actions: [
          // Language picker RU/KZ
          IconButton(
            icon: const Icon(Icons.language, color: Color(0xFF2B6CB0)),
            tooltip: _uiLang == 'kk' ? t('language') : t('language'),
            onPressed: () async {
              final choice = await showDialog<String>(
                context: context,
                builder: (ctx) => SimpleDialog(
                  title: Text(_uiLang == 'kk' ? '–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑' : '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'),
                  children: [
                    SimpleDialogOption(
                      onPressed: () => Navigator.pop(ctx, 'kk'),
                      child: const Text('“ö–∞–∑–∞“õ—à–∞'),
                    ),
                    SimpleDialogOption(
                      onPressed: () => Navigator.pop(ctx, 'ru'),
                      child: const Text('–†—É—Å—Å–∫–∏–π'),
                    ),
                  ],
                ),
              );
              if (choice != null) {
                final p = await SharedPreferences.getInstance();
                await p.setString('ui.lang', choice);
                _uiLang = choice;
                if (mounted) setState(() {});
              }
            },
          ),
          FutureBuilder<String?>(
            future: _auth.currentUserEmail(),
            builder: (context, snapshot) {
              final email = snapshot.data;
              final loggedIn = email != null && email.isNotEmpty;
              return PopupMenuButton<String>(
                icon: Icon(loggedIn ? Icons.account_circle : Icons.login, color: const Color(0xFF2B6CB0)),
                tooltip: loggedIn ? (email) : t('login'),
                onSelected: (value) async {
                  if (value == 'login') {
                    _showAuthDialog();
                  } else if (value == 'logout') {
                    await _auth.logout();
                    if (mounted) setState(() {});
                  } else if (value == 'history') {
                    if (!loggedIn) {
                      _showAuthDialog();
                      return;
                    }
                    if (context.mounted) {
                      Navigator.of(context).push(
                        MaterialPageRoute(builder: (_) => const HistoryScreen()),
                      );
                    }
                  }
                },
                itemBuilder: (ctx) {
                  if (!loggedIn) {
                    return [
                      PopupMenuItem(value: 'login', child: Text(t('login'))),
                    ];
                  }
                  return [
                    PopupMenuItem(value: 'history', child: Text(t('history'))),
                    PopupMenuItem(value: 'logout', child: Text(t('logout'))),
                  ];
                },
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.info_outline, color: Color(0xFF2B6CB0)),
            onPressed: _showInfoDialog,
            tooltip: t('info'),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Large Title (iOS style)
            const Align(
              alignment: Alignment.centerLeft,
              child: Text(
                'Bilim AI',
                style: TextStyle(
                  fontSize: 34,
                  fontWeight: FontWeight.w700,
                  letterSpacing: -0.5,
                ),
              ),
            ),
            const SizedBox(height: 8),
            Align(
              alignment: Alignment.centerLeft,
              child: Text(
                t('subtitle'),
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 14,
                ),
              ),
            ),
            const SizedBox(height: 16),
            // –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[50],
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.grey[300]!),
              ),
              child: Focus(
                onKeyEvent: (node, event) {
                  if (event is KeyDownEvent && event.logicalKey == LogicalKeyboardKey.enter) {
                    final bool isShift = HardwareKeyboard.instance.isShiftPressed;
                    if (!isShift && !_isLoading && _textController.text.trim().isNotEmpty) {
                      _sendToAI();
                      return KeyEventResult.handled; // –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
                    }
                  }
                  return KeyEventResult.ignored;
                },
                child: TextField(
                  controller: _textController,
                  maxLines: 3,
                  keyboardType: TextInputType.multiline,
                  textInputAction: TextInputAction.newline,
                  onSubmitted: (_) {
                    if (!_isLoading && _textController.text.trim().isNotEmpty) {
                      _sendToAI();
                    }
                  },
                  decoration: InputDecoration(
                  hintText: t('placeholder'),
                    hintStyle: TextStyle(color: Colors.grey[600]),
                    border: InputBorder.none,
                    contentPadding: const EdgeInsets.all(16),
                  ),
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ),
            const SizedBox(height: 16),
            // –ö–Ω–æ–ø–∫–∞ "–ñ—ñ–±–µ—Ä—É" —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            // Input actions (iOS pill + circular send)
            Row(
              children: [
                Expanded(
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[50],
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.grey[300]!),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                    child: Row(
                      children: [
                        Expanded(
                          child: Text(
                            _isLoading ? t('sending') : t('ready'),
                            style: TextStyle(color: Colors.grey[600]),
                          ),
                        ),
                        IconButton(
                          icon: const Icon(Icons.clear, size: 20),
                          tooltip: t('clear'),
                          onPressed: () {
                            _textController.clear();
                            setState(() { _aiResponse = null; });
                          },
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                SizedBox(
                  width: 52,
                  height: 52,
                  child: ElevatedButton(
                    onPressed: _isLoading ? null : _sendToAI,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF2B6CB0),
                      foregroundColor: Colors.white,
                      shape: const CircleBorder(),
                      elevation: 2,
                    ),
                    child: _isLoading
                        ? const SizedBox(
                            width: 20,
                            height: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                          )
                        : const Icon(Icons.send),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            // –ß–∞—Ç: —Å–ø–∏—Å–æ–∫ –ø—É–∑—ã—Ä–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            Expanded(
              child: Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: _messages.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.school_outlined,
                              size: 64,
                              color: Colors.grey[400],
                            ),
                            const SizedBox(height: 16),
                            Text(
                              t('ask'),
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey[600],
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              t('help'),
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey[500],
                              ),
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        controller: _scrollController,
                        padding: const EdgeInsets.all(16),
                        itemCount: _messages.length + (_isLoading ? 1 : 0),
                        itemBuilder: (context, index) {
                          if (_isLoading && index == _messages.length) {
                            return Align(
                              alignment: Alignment.centerLeft,
                              child: Container(
                                margin: const EdgeInsets.only(bottom: 12),
                                padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
                                decoration: BoxDecoration(
                                  color: Colors.grey[100],
                                  borderRadius: BorderRadius.circular(16),
                                  border: Border.all(color: Colors.grey[300]!),
                                ),
                                child: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const SizedBox(
                                      width: 16,
                                      height: 16,
                                      child: CircularProgressIndicator(strokeWidth: 2),
                                    ),
                                    const SizedBox(width: 8),
                                    Text(t('thinking'), style: TextStyle(color: Colors.grey[700])),
                                  ],
                                ),
                              ),
                            );
                          }
                          final m = _messages[index];
                          final isUser = m['role'] == 'user';
                          final content = m['content'] ?? '';
                          return Align(
                            alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
                            child: Container(
                              constraints: const BoxConstraints(maxWidth: 680),
                              margin: const EdgeInsets.only(bottom: 12),
                              padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 10),
                              decoration: BoxDecoration(
                                color: isUser ? const Color(0xFF2B6CB0) : Colors.white,
                                borderRadius: BorderRadius.circular(16),
                                border: Border.all(color: isUser ? const Color(0xFF2B6CB0) : Colors.grey[300]!),
                              ),
                              child: isUser
                                  ? SelectableText(
                                      content,
                                      style: const TextStyle(color: Colors.white, fontSize: 16, height: 1.5),
                                    )
                                  : _buildResponseWidget(content),
                            ),
                          );
                        },
                      ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}